<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: opinion | cogent free knowledge]]></title>
  <link href="http://www.joelclermont.com/categories/opinion/atom.xml" rel="self"/>
  <link href="http://www.joelclermont.com/"/>
  <updated>2014-07-26T16:00:30+00:00</updated>
  <id>http://www.joelclermont.com/</id>
  <author>
    <name><![CDATA[Joel Clermont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The oppressive nature of mathematical facts]]></title>
    <link href="http://www.joelclermont.com/2012/11/28/the-oppressive-nature-of-mathematical-facts/"/>
    <updated>2012-11-28T19:54:00+00:00</updated>
    <id>http://www.joelclermont.com/2012/11/28/the-oppressive-nature-of-mathematical-facts</id>
    <content type="html"><![CDATA[<p>I was frustrated watching the news tonight, seeing reports of long lines of people waiting to buy lottery tickets for tonight's $500,000,000+ jackpot. There are several angles of absurdity to consider here. For example, why all the excitement over $500 million? Wouldn't any of these players be equally thrilled by $10 million or even $5 million? Another example: Several of the people interviewed, who had just bought <em>hundreds</em> of dollars of tickets, were unemployed, facing foreclosure, struggling to pay medical bills, and so forth. But putting all that aside, let's just look at the math.</p>

<!-- more -->


<p>Sometimes, when presented with large numbers, we simply fail to grasp how large they are. This is especially true when it comes to matters of probability and statistics. So let's try to break this down into smaller pieces to make it more tangible. What if I asked you to guess my home address? I would even tell you what street I lived on and you knew there are only about 100 homes on my street. (Pretend you had a list of valid address, so you won't be able to guess a home address that doesn't exist.) It's <em>possible</em> you could guess it on the first try, but we all know it would be relatively unlikely. The odds would be 1 in 100.</p>

<p>We can grasp that. 1 in 100 is a tangible probability. Those are pretty good odds, right? Well, it depends on the context. Put those odds it another situation: what if you went to the doctor and were diagnosed with an illness that had a 1 in 100 chance of survival. Would you like those odds? No, in that context 1 in 100 is very bad. It is a very slim ray of hope, right? Kind of depressing.</p>

<p>Oh, but it gets worse. What if I only told you what city I lived in? Now the odds are 1 in 4734 (all statistics are from the 2010 census). Now what if I only told you that I lived in Ozaukee County? Odds now shift to a meager 1 in 36,000.</p>

<p>Let's keep going . . . Now you only know I live in Wisconsin: 1 in 2,634,781. We all agree this is practically impossible, right? Think about it: all the houses on each road, in each city, in each county, in the entire state of Wisconsin. There is no way you could reasonably believe that you had any real chance of guessing my address given these odds. Yes, there is a chance you <em>could</em> guess it. That's how probability works: the event can happen. But when you put it in a tangible context and you can begin to visualize the odds of guessing, it looks incredibly bleak.</p>

<p>Here's the thing: your odds of guessing my home address, armed with only the knowledge that I live in Wisconsin, are still MUCH better than your odds of winning the Powerball lottery. Those odds, according to the official Powerball site, are 1 in 170 million. Let me write out those zeroes: 1 in 170,000,000. Did your eyes just glaze over? Let's make it tangible again: <strong>You have better odds of guessing my home address if all you know is that I live in the United States.</strong> There are over 132,000,000 housing units in the US. Do you now see how ridiculously improbable it is that you will win the lottery?</p>

<p>I hear some rebuttals: But I'm going to buy more than one ticket. Surely that will boost my odds.</p>

<p>Yes, mathematically speaking, your odds will get better. But practically speaking, you still have no chance.Â Let's put some of the earlier odds in the perspective of buying multiple lottery tickets:</p>

<ul>
<li>Increase your chances of winning to the same level as knowing I live in WI: buy 65 tickets</li>
<li>Increase your chances of winning to the same level as knowing I live in Ozaukee County: buy 4,800 tickets</li>
<li>Increase your chances of winning to the same level as knowing I live in Grafton: buy 37,000 tickets</li>
<li>Increase your chances of winning to the same level as knowing I live on Falls Road: buy 1,750,000 tickets</li>
</ul>


<p>So if you want to make your chances of winning about the same chances of surviving a terminal diagnosis with 1 in 100 odds, just buy 1,750,000 tickets. Does that put in perspective? Oh, and Powerball tickets are $2 each, so that's a $3.5 million investment to have the kind of odds that would send you home sobbing from the doctor. Depressed yet? You should be. That is the oppressive nature of mathematical facts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I love Twitter Bootstrap]]></title>
    <link href="http://www.joelclermont.com/2012/04/17/i-love-twitter-bootstrap/"/>
    <updated>2012-04-17T23:31:00+00:00</updated>
    <id>http://www.joelclermont.com/2012/04/17/i-love-twitter-bootstrap</id>
    <content type="html"><![CDATA[<p>If you haven't heard of it, go take a quick look at <a href="http://twitter.github.com/bootstrap/">Twitter Bootstrap</a>.  As you click around the github project site, you'll get the sense that all these layout guides and widgets and buttons and icons look oddly familiar. Part of that is the fact that Twitter itself is built with this style package. But even beyond that, <a href="http://builtwithbootstrap.com/">many many many many sites</a> are using this tool kit as well. I've sensed a little backlash, mostly from designers, at this rampant use of the Twitter Bootstrap. At a certain level, I agree, but I'm here to talk about why I love Twitter Bootstrap.</p>

<!-- more -->


<p>First, let me make it clear that I am not a designer. I am a developer. In fact, I am most comfortable doing server-side development. That should give you some stereotypical idea of what my design skills entail. So coming from this context, you begin to see why I love the Twitter Bootstrap so much. Very often, I'll get an idea for an application but quickly get bogged down in spinning up a user interface for it. Sure, I could just go totally utilitarian while building the application, but it's hard to put your heart in something using default browser styles. But now, with Twitter Bootstrap, I can download a small package of images, css and javascript and immediately have default styles that look halfway decent. I even have sane stylings for forms, buttons and other useful widgets. I have a simple way to do grid layouts and side bars and navigation bars and all those little things that you use on every single site.</p>

<p>Once the idea comes to fruition, I work with a designer to make it look less generic, but Twitter Bootstrap gets me from idea to implementation without bogging me down in the parts of a web project I find less interesting and often frustrating.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The importance of upgrading]]></title>
    <link href="http://www.joelclermont.com/2011/08/17/the-importance-of-upgrading/"/>
    <updated>2011-08-17T12:48:00+00:00</updated>
    <id>http://www.joelclermont.com/2011/08/17/the-importance-of-upgrading</id>
    <content type="html"><![CDATA[<p>Most web sites use third-party code. This code comes in a few different flavors:</p>

<ul>
<li>client-side libraries (jQuery, dojo)</li>
<li>server-side libraries (form mail scripts, oAuth integration)</li>
<li>server-side frameworks (Zend Framework, Symfony)</li>
<li>entire applications (WordPress, Joomla)</li>
</ul>


<p>As a developer, when you selected one or more of these tools, you hopefully picked a project that was active and well supported. This means there will inevitably be upgrades to that third-party code. Some of these upgrades add features, but most upgrades also include bug fixes and security patches.</p>

<!-- more -->


<p>Blindly ignoring these updates is an (all too common) option that developers take once their site is launched and "done." This can get you into a lot of trouble with a client when one of those unpatched tools is used as an attack vector to compromise the site or server. Sticking your head in the sand is rarely the right decision.</p>

<p>But the other factor to consider is that upgrading these tools takes time. In addition, it's not uncommon for an upgrade to break your code. Maybe it's a purposeful break with backward compatibility or maybe it's an unintended consequence of how you integrated with that third-party code. This is one big reason why some developers ignore the upgrades, or at the very least, ignore them as long as possible.</p>

<p>If you are working on your own site on your own server, the issues are relatively clear. You can personally decide how much risk to accept for your site and server. You can decide how much time to invest in upgrades and testing. But things get murky when it's a client site. Is maintenance of these third party tools billable? What about breaking changes? What if the client doesn't want to pay, but the site is hosted on your server and you don't want the exposure of unpatched security risks?</p>

<p>How do you handle this? What are your clients' expectations? Leave me a comment. Unfortunately, I don't yet have a great answer to all these questions myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Finally, a PHP conference in Wisconsin!]]></title>
    <link href="http://www.joelclermont.com/2011/08/04/finally-a-php-conference-in-wisconsin/"/>
    <updated>2011-08-04T16:49:00+00:00</updated>
    <id>http://www.joelclermont.com/2011/08/04/finally-a-php-conference-in-wisconsin</id>
    <content type="html"><![CDATA[<p>I'm a huge fan of <a href="http://www.phparch.com/">php|architect</a>: the magazine, the books, the online training and especially their conferences. Living in the Milwaukee metro area, I have a short 90 minute drive to the flagship <a href="http://tek.phparch.com/">php|tek conference</a> they host in Chicago each year. My schedule doesn't always allow me to attend, but I do everything I can to make it. I'm still putting into practice the things I learned at php|tek 2010 and I regularly keep in touch with the many friends I met there.</p>

<!-- more -->


<p>That being said, it came as a very welcome surprise today when I opened my mail and found an invitation to <a href="http://codeworks.phparch.com/">CodeWorks 2011</a> in Madison, Wisconsin! CodeWorks is a single-day, single track conference focused on PHP, but historically, it's stayed pretty far away from Wisconsin. I suspect this is because we already have php|tek in our backyard, but I always lobbied hard to have a CodeWorks stop near us as well. Let's face it: not everyone can take a week off work to attend php|tek, not to mention the travel and hotel expenses. Don't get me wrong, it's worth every cent, but for those that haven't experienced it firsthand, it may be a big pill to swallow.</p>

<p>With a CodeWorks coming to my home state, I am going to sing (or at least blog) about it from the rooftops. I want the Madison event to be a success so there's a higher likelihood it may return in 2012. I'll be preaching about it at our next several <a href="http://www.mkepug.org/">Milwaukee PHP meetings</a>, as well as on <a href="https://twitter.com/#!/jclermont">Twitter</a>. With the low cost and the location, if you are a PHP developer in southern Wisconsin (or even northern Wisconsin or Minneapolis), you have run out of excuses not to attend.</p>

<p><a href="http://codeworks.phparch.com/east-coast-tour/madison-wi-december-1-2011/">Get your ticket</a>Â by August 13 and it's only $60. What are you waiting for? Go sign up now and I'll see you there!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Do programmers rely too heavily on Internet resources?]]></title>
    <link href="http://www.joelclermont.com/2011/07/07/do-programmers-rely-too-heavily-on-internet-resources/"/>
    <updated>2011-07-07T14:25:00+00:00</updated>
    <id>http://www.joelclermont.com/2011/07/07/do-programmers-rely-too-heavily-on-internet-resources</id>
    <content type="html"><![CDATA[<p>Let's face it: there is a <em>lot</em>Â to know as a programmer. There is the syntax of your preferred language(s), the syntax and function library of your database technology and you probably have some sort of framework or common library containing dozens, if not hundreds, of classes on top of that. This can be overwhelming at first, but most programmers recognize the folly in trying to memorize everything. The reality is you probably only need to commit a small percentage of that knowledge to memory. The rest can be assisted by your IDE, the documentation or an Internet search.</p>

<p>Lately, though, I've begun wondering if programmers might take this notion too far and relyÂ too heavily on their "extended memory." This thought occurred to me as I was browsing my Google search history. I saw a couple searches come up repeatedly every few weeks over the course of the last several months. Could it be possible that I was really searching time and time again for the same answer to the same question? It was a scary thought.</p>

<!-- more -->


<p>That evening was our monthly <a href="http://mkepug.com">Milwaukee PHP user group</a> meeting, so I decided to bring it up as a question during introductions. The consensus among the group was pretty much the same pattern I had recognized in my own search activity: people were relying very heavily on search engines in their day to day work.</p>

<p>So I decided to try an experiment: cut myself off from this extended brain; force myself to work without that safety net. Would I become helpless? While it was definitely a difficult adjustment at first, I quickly realized that by forcing myself to recall the answer to the question at hand, it became easier to recall each time. I realized that much of this information I was repeatedly searching for was really rattling around in my brain all along, but by reflexively "reaching" for Google, I wasn't giving myself a fair chance to remember it on my own.</p>

<p>I came to the conclusion that just because we can't memorize <em>everything</em>, doesn't mean we should memorizeÂ <em>nothing</em>. In fact, I'd wager that many programmers have committed less than they should to memory if they want to work at peak efficiency.</p>

<p>The long term result of this experiment is that I am far more judicious in my use of the all-powerful search engine for my daily work. I haven't cut myself off completely, but I am far more conscious of what things I'm searching for and how often I'm relying on the hive mind. Overall, I have no doubts that both my productivity and my confidence have increased dramatically. Give it a try yourself and you might be surprised at the results.</p>
]]></content>
  </entry>
  
</feed>
