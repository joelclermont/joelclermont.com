<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | cogent free knowledge]]></title>
  <link href="http://www.joelclermont.com/categories/programming/atom.xml" rel="self"/>
  <link href="http://www.joelclermont.com/"/>
  <updated>2014-07-26T16:00:30+00:00</updated>
  <id>http://www.joelclermont.com/</id>
  <author>
    <name><![CDATA[Joel Clermont]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Day one with Go]]></title>
    <link href="http://www.joelclermont.com/2013/03/27/day-one-with-go/"/>
    <updated>2013-03-27T18:44:00+00:00</updated>
    <id>http://www.joelclermont.com/2013/03/27/day-one-with-go</id>
    <content type="html"><![CDATA[<p>I have the habit of picking up a new programming language or two each year, not necessarily to master them or even to write production code with them, but just to be exposed to new approaches to familiar problems. For the last few months, <a href="https://twitter.com/donatj">two</a> <a href="https://twitter.com/henderjon">friends</a> of mine have been urging me to try out <a href="http://golang.org">Go</a>, a relatively new language from Google. Since I had a 17-day vacation planned in Florida, I decided to give Go a try while I had abundant free time.</p>

<p>Here is the five-second marketing pitch from Google regarding Go:</p>

<blockquote><p>Go is an open source programming environment that makes it easy to build simple, reliable, and efficient software.</p></blockquote>

<p>Beyond that, one thing that kept coming up when I heard people talk about Go was how it handled concurrency. My focus lately has been on writing scalable web services, so concurrency is something that gets my attention.</p>

<!-- more -->


<p>To get started, I worked through the interactive tutorial at <a href="http://tour.golang.org">tour.golang.org</a>. If you're even a little curious about Go, I highly recommend it. It works entirely in the browser, so there's nothing to install, and it has a nice mix of examples and fun, simple, but useful exercises to try on your own.</p>

<p>It stays at a fairly high level, just giving you an overview of the language, but where it makes sense, it links to more detailed docs on the subject being discussed. One small criticism: It would be nice if they had some sample solutions to the exercises. The exercises include tests, so you know you solved the problem, but as someone new to the language, I'd like to see an idiomatic Go solution.</p>

<p>A lot about Go is familiar, so I won't bore you with the details. Instead, let me point out some things I found unique or interesting.</p>

<h2>Compile-time checks</h2>

<p>Since Go is a compiled language, you'd expect there to be some compile-time safety checks. Go does something I found a bit jarring at first: if you import a module or declare a variable, but don't use them, it fails to compile. You might think this is a bit overbearing (I know I did), but the more I played with Go, the more I liked this approach. Not only does it prevent naming errors, but it keeps the "cruft level" lower by forcing you to remove things you aren't using.</p>

<h2>Multiple return values</h2>

<p>C# has "out" params and in other languages, like PHP, it's common to wrap multiple return values in an array. I really like how Go handles this though. Right in the function declaration, after the input parameters, you can specify the types of one (or more) return values</p>

<p>``` go
func swap(x, y string) (string, string) {</p>

<pre><code>return y, x
</code></pre>

<p>}
```</p>

<p>Even better, you can name these return values, providing an alternate syntax. Note how I just assign to the return vars and then use an empty <code>return</code> statement.</p>

<p>``` go
func split(sum int) (x, y int) {</p>

<pre><code>x = sum * 4 / 9
y = sum - x
return
</code></pre>

<p>}
```</p>

<h2>One true loop: <code>for</code></h2>

<p>This one seemed a little odd to me at first, too, but like the compile-time checks, it grew on me. There are no <code>foreach</code>, <code>do</code> or <code>while</code> loops. There is only <code>for</code>. But you can easily emulate a <code>while</code> loop by omitting the pre and post condition checks.</p>

<p>``` go
func main() {</p>

<pre><code>sum := 1
for sum &lt; 1000 {
    sum += sum
}
fmt.Println(sum)
</code></pre>

<p>}
```</p>

<p>Using the <code>range</code> form also gives you something like a foreach.</p>

<p>``` go
var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}</p>

<p>func main() {</p>

<pre><code>for i, v := range pow {
    fmt.Printf("2**%d = %d\n", i, v)
}
</code></pre>

<p>}
```</p>

<p>In the above example, <code>i</code> becomes the 0-based index of your loop and <code>v</code> is the current value. If you only need the index or the value, you can omit whichever one you don't need.</p>

<p>``` go
pow := make([]int, 10)
// you could also write this as i, _ but it's unnecessary
for i := range pow {</p>

<pre><code>pow[i] = 1 &lt;&lt; uint(i)
</code></pre>

<p>}
for _, v := range pow {</p>

<pre><code>fmt.Printf("%d\n", v)
</code></pre>

<p>}
```</p>

<h2>Arrays and slices</h2>

<p>Most programming languages have arrays, so nothing new to talk about there, but Go has something called slices. These are an abstraction on top of an underlying array data structure. Unlike arrays, slices don't have a fixed size. Also, a slice is basically just a definition of a particular array segment, so it's easier to pass around then an array. I'm not going to pretend to understand all the internals yet, so if you want a deeper dive, check out this <a href="http://blog.golang.org/2011/01/go-slices-usage-and-internals.html">post on the Go blog</a>.</p>

<p>This is one area I need to understand better and use more before I can form a more solid opinion on whether or not I like it.</p>

<h2>Maps have a built in key checker</h2>

<p>When pulling values out of a map, you can also return a second boolean value indicating whether or not that key existed. This often results in more terse code than you would have in other languages where you need to test for the key first before trying to fetch the value.</p>

<p>``` go
m := make(map[string]int)</p>

<p>m["x"] = 10
m["y"] = 20</p>

<p>v, ok := m["x"]
// v = 10 (the value from the hash), ok = true</p>

<p>v, ok := m["z"]
//v = 0 (the default value for an int), ok = false
```</p>

<h2>Interfaces</h2>

<p>Interfaces can be used <em>without</em> needing to declare that your <del>class</del> type implements an interface. Go is smart enough to see that your <del>class</del> type conforms to the interface and figures that out for you. Let this sink in for a bit and you'll see how genius it is. If my brief description wasn't enough for you, read this <a href="http://golangtutorials.blogspot.com/2011/06/interfaces-in-go.html">post on the Go blog</a> for more details.</p>

<p>Edit: As @elimisteve points out in the comments, Go doesn't have classes. Changing <code>class</code> to <code>type</code> to be more accurate. Thanks!</p>

<h2>Concurrency</h2>

<p>I know I teased this at the start, but I saved the best for last. Plus, the Go tour saved it to last as well, so my notes were made in that order.</p>

<p>With Go, you can easily spawn a new lightweight thread by adding <code>go</code> to the front of your function call. This new thread is in the same address space as your main application so you need some way to manage this shared memory. Go does this with the concept of channels.</p>

<p>A channel can both send and receive data. So perhaps your additional threads are doing some work and sending their results into the channel. Your main method could be reading from the channel and reporting progress back to the user. Here's a simple example to see what the syntax looks like.</p>

<p>``` go
func sum(a []int, c chan int) {</p>

<pre><code>sum := 0
for _, v := range a {
    sum += v
}
c &lt;- sum // send sum to c
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>a := []int{7, 2, 8, -9, 4, 0}

// you have to make a channel before you can use it
c := make(chan int)

// two new threads created
go sum(a[:len(a)/2], c)
go sum(a[len(a)/2:], c)

x, y := &lt;-c, &lt;-c // receive from c

fmt.Println(x, y, x+y)
</code></pre>

<p>}
```</p>

<p>One important detail: a channel will block while waiting for the other side to send or receive. To get around this, you can define a buffered channel, with a maximum capacity. A buffered channel will get around the block issue as long as you don't let your buffer fill or drain completely.</p>

<p>Another cool technique with channels is using the <code>range</code> and <code>close</code> language features. In this example, the thread will keep sending until it's done, and then issue a <code>close</code> command on the channel. Back in the main method, it will keep receiving until it receives the <code>close</code>. This is a really nice, lightweight way to manage communications.</p>

<p>``` go
func fibonacci(n int, c chan int) {</p>

<pre><code>x, y := 0, 1
for i := 0; i &lt; n; i++ {
    c &lt;- x
    x, y = y, x+y
}
// alerts the receiver that no more data is coming
close(c)
</code></pre>

<p>}</p>

<p>func main() {</p>

<pre><code>c := make(chan int, 10)
go fibonacci(cap(c), c)

// this will keep receiving until it receives a close command
for i := range c {
    fmt.Println(i)
}
</code></pre>

<p>}
```</p>

<p>I have only briefly described channels and concurrency, but hopefully this is enough to make you curious to learn more. No surprise, but I'm going to again link you to the <a href="http://golangtutorials.blogspot.com/2011/06/channels-in-go.html">Go blog</a> for more information.</p>

<p>What do you think? Is Go interesting to you? Have you tried it yourself? Share your experiences and opinions in the comments. Also, I will be diving even deeper into Go over the next few weeks and posting more information here. If you're interested, <a href="{{%20site.subscribe_rss%20}}">subscribe to my RSS feed</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pass Puppet command line options with Vagrant]]></title>
    <link href="http://www.joelclermont.com/2012/12/25/pass-puppet-command-line-options-with-vagrant/"/>
    <updated>2012-12-25T23:03:00+00:00</updated>
    <id>http://www.joelclermont.com/2012/12/25/pass-puppet-command-line-options-with-vagrant</id>
    <content type="html"><![CDATA[<p>This week, I finally blocked some time to seriously investigate Vagrant and Puppet. The documentation for both tools is decent.</p>

<p>Taking the knowledge I gained from reading through the "Quick Start" documents, my next logical step was to spin up my own custom development environment for local usage. I quickly ran into some issues and wanted to enable the "debug" mode of Puppet. Since I'm not calling Puppet directly, it's not as easy as tacking on a <code>--debug</code> option to the puppet command line. Instead, I need to tell Vagrant to run Puppet in debug mode, using the Vagrantfile.</p>

<!-- more -->


<p>The documentation for Vagrant addresses <a href="http://vagrantup.com/v1/docs/provisioners/puppet.html">how to pass command line options</a>, but they don't show a complete example involving both command line options and the block syntax you normally use to setup the Puppet configuration. Here are two ways that you can use to pass both:</p>

<p><code>ruby
config.vm.provision :puppet, :options =&gt; ['--verbose', '--someotheroption'] do |puppet|
  puppet.manifests_path = "manifests"
  puppet.manifest_file = "default.pp"
end
</code></p>

<p>If you have a lot of options to pass, that can be a bit bulky in this format. Here is another way that works as well:</p>

<p><code>ruby
config.vm.provision :puppet do |puppet|
  puppet.manifests_path = "manifests"
  puppet.manifest_file = "default.pp"
  puppet.options &lt;&lt; '--verbose'
  puppet.options &lt;&lt; '--someotheroption'
  # puppet.options is a hash so you can keep adding options across multiple lines
end
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git goodies: see all unpushed files]]></title>
    <link href="http://www.joelclermont.com/2012/08/25/git-goodies-see-all-unpushed-files/"/>
    <updated>2012-08-25T14:22:00+00:00</updated>
    <id>http://www.joelclermont.com/2012/08/25/git-goodies-see-all-unpushed-files</id>
    <content type="html"><![CDATA[<p>My preferred workflow is to be able to push changes into production using git. However, sometimes the project/server doesn't support this (yet).</p>

<p>In these scenarios, it is very useful to be able to see which files have not yet been pushed to origin. Here is a nice one-liner that does exactly this:</p>

<!-- more -->


<p><code>bash
git log origin/master..master --name-only --pretty="format:" | sort | uniq
</code></p>

<p>This assumes that you are working in master and that you don't push to origin until you deploy to production. Adjust as needed.</p>

<p>If you find yourself using this a lot, you can create an alias for it so that you can simply type: git unpushed to run this command. Edit your ~/.gitconfig file and add this under the [alias] block if you like this idea:</p>

<p><code>bash
unpushed = !sh -c 'git log origin/master..master --name-only --pretty="format:" | sort | uniq | grep -v "^$"'
</code></p>

<p>This file list could even be the input to another script which deploys the changed files to the production server. Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Date calculations are more complex than you think]]></title>
    <link href="http://www.joelclermont.com/2011/09/14/date-calculations-are-more-complex-than-you-think/"/>
    <updated>2011-09-14T15:14:00+00:00</updated>
    <id>http://www.joelclermont.com/2011/09/14/date-calculations-are-more-complex-than-you-think</id>
    <content type="html"><![CDATA[<p>Date and time manipulation is an area of programming that seems relatively simple on its surface, but lots of danger lurks just out of view. How hard could it possibly be to take a date/time and add 1 day to it? or 1 week? Piece of cake, right? You might do something like this:</p>

<p>``` php
$eventTime = strtotime('2011-09-15');</p>

<p>//add one day to the date
$newEventTime = $eventTime + (24 * 60 * 60);</p>

<p>//expects 2011-09-16 and will USUALLY work
echo date('Y-m-d', $newEventTime);
```</p>

<!-- more -->


<p>We've likely all seen code like that and probably written some ourselves. Here's another way to do it, this time using the built in date/time functionality in PHP.</p>

<p>``` php
$eventTime = '2011-09-15';</p>

<p>//add one day to the date
$newEventTime = strtotime($eventTime . ' +1 day');</p>

<p>//expects 2011-09-16 and will ALWAYS work
echo date('Y-m-d', $newEventTime);
```</p>

<p>These two pieces of code are functionally equivalent, right? Well, the answer is: <strong>most of the time</strong>. It's the edge cases that can really drive you nuts though. What if you're right on the boundary of daylight savings time? In these cases, a calendar day may be 23 hours or 25 hours in length, not 24 as you expect.</p>

<p>The lesson here is to use the built-in functions to their full potential. Don't reinvent the wheel or be needlessly clever. This is a lesson I have learned the hard way while debugging in frustration. PHP has some incredibly powerful date manipulation and parsing functionality. Now go check your code for 24 * 60 and fix it before it bites you (and it will eventually).</p>

<p><em>Note: Part of the inspiration for this post was Derick Rethan's excellent book <a href="http://www.phparch.com/books/phparchitects-guide-to-date-and-time-programming/">php|architect's Guide to Date and Time Programming</a>. You might not think this subject could possibly fill a whole book, but you'd be wrong. Like I mentioned above, this topic is deceptively simple and I highly recommend adding this book to your library.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WordPress plugin for contextual dynamic text]]></title>
    <link href="http://www.joelclermont.com/2011/07/16/wordpress-plugin-for-contextual-dynamic-text/"/>
    <updated>2011-07-16T21:35:00+00:00</updated>
    <id>http://www.joelclermont.com/2011/07/16/wordpress-plugin-for-contextual-dynamic-text</id>
    <content type="html"><![CDATA[<p>WordPress has a concept called <a href="http://codex.wordpress.org/Shortcode_API">shortcodes</a>. They're very handy for inserting chunks of text or functionality with a simple text syntax. For example, one of the stock shortcodes allows you to type <code>[gallery]</code> in a post where you want a photo gallery to appear. But the real power is exposed when you start building your own shortcodes.</p>

<!-- more -->


<p>A while ago, Scott, our <a href="http://www.orionweb.net/author/scottorionweb-net/">Internet Marketing director</a>, asked me to whip up some code that would allow him to display a different phone number on a page based on how the visitor got to the site. If they came through Google AdWords, we would target their specific city and provide them a local number, but this also allowed us to track AdWords clickthroughs all the way to actual phone calls. Even better, when someone entered the site with this contextual data, we stored it in a cookie, so that if they visited the site in the future, we could continue to provide the most relevant phone number.</p>

<p>Fast forward a few months and Scott now asks for this same functionality, but as a WordPress plugin. I looked around and found a few existing plugins that handled dynamic short codes and some even worked with similar logic on the query string and cookie, but none were a great fit. The one that looked most promising had been abandoned and didn't work with any recent versions of WordPress, so I decided to start working on one myself. A couple hours later, version 0.1 of my <a href="https://github.com/joelclermont/wp-dynamic-text">Dynamic Text plugin for WordPress</a> is up on Github and at least as functional as my original non-WordPress code.</p>

<p>Feel free to try it out yourself and share any feedback or suggestions you might have. Once I get through enough of my feature list, I'll publish it on the WordPress plugin directory as well.</p>
]]></content>
  </entry>
  
</feed>
